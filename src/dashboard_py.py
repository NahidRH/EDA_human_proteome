# -*- coding: utf-8 -*-
"""dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Ytiu5w_9_mji7oZXqwmu0CHJWbnMH47
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

# Load data
@st.cache_data
def load_data():
      df = pd.read_csv("data/sample_uniprot_100.tsv", sep='\t')
      return df

df = load_data()
st.title("ðŸ§¬ EDA Dashboard: Human Proteome")

# --- Sidebar ---
st.sidebar.header("Options")
plot_type = st.sidebar.selectbox("Choose a plot:", [
    "Sequence Length Distribution",
    "Molecular Weight Distribution",
    "Top Functional Keywords",
    "Top Subcellular Locations"
])

# --- Main content ---
if plot_type == "Sequence Length Distribution":
    st.subheader("Protein Sequence Lengths")
    st.markdown(
        "This histogram shows the distribution of protein sequence lengths in number of amino acids. "
        "Longer proteins may have more domains or complex functions, while shorter ones are often regulatory or structural."
    )
    fig, ax = plt.subplots()
    sns.histplot(df['Length'], bins=50, kde=True, ax=ax)
    ax.set_xlabel("Length (Amino Acids)")
    ax.set_ylabel("Count")
    st.pyplot(fig)

elif plot_type == "Molecular Weight Distribution":
    st.subheader("Molecular Weight of Proteins")
    st.markdown(
        "This histogram illustrates the distribution of protein molecular weights in Daltons (Da). "
        "Molecular weight is calculated from amino acid composition and affects mobility, structure, and purification."
    )
    fig, ax = plt.subplots()
    sns.histplot(df['Mass'], bins=50, kde=True, color='orange', ax=ax)
    ax.set_xlabel("Mass (Daltons)")
    ax.set_ylabel("Count")
    st.pyplot(fig)

elif plot_type == "Top Functional Keywords":
    st.subheader("Most Common Functional Keywords")
    st.markdown(
    "This chart shows the most common functional annotations across the selected human proteins. "
    "Each keyword describes a known biological role, such as 'receptor' or 'kinase'."
    )
    df['Keywords'] = df['Keywords'].fillna('')
    keywords = df['Keywords'].str.split(';').explode().str.strip()
    top_keywords = keywords.value_counts().head(20)
    short_labels = [k[:40] + '...' if len(k) > 40 else k for k in top_keywords.index]
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.barplot(y=short_labels, x=top_keywords.values, ax=ax, palette="viridis")
    ax.set_title("Top 20 Functional Keywords")
    ax.set_xlabel("Number of Proteins")
    ax.set_ylabel("Keyword")
    plt.tight_layout()
    st.pyplot(fig)


elif plot_type == "Top Subcellular Locations":
    st.subheader("Most Common Subcellular Locations")
    st.markdown(
        "This chart shows the most frequently annotated subcellular locations of proteins. "
        "Note that a single protein may be associated with multiple locations, such as both nucleus and cytoplasm. "
        "If subcellular location information is missing in the UniProt entry, that protein is not included in the chart."
    )
    df['Subcellular location [CC]'] = df['Subcellular location [CC]'].fillna('')
    locations = df['Subcellular location [CC]'].str.split(';').explode().str.strip()
    top_locations = locations.value_counts().head(10)
    short_labels = [loc[:40] + '...' if len(loc) > 40 else loc for loc in top_locations.index]
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.barplot(y=short_labels, x=top_locations.values, ax=ax, color='skyblue')
    ax.set_title("Top 10 Subcellular Locations")
    ax.set_xlabel("Number of Proteins")
    ax.set_ylabel("Location")
    plt.tight_layout()
    st.pyplot(fig)

